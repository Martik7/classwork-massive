#include <stdio.h>
#include <iostream>
#include <time.h>
#include <locale.h>
#include <math.h>

void main()
{
	srand(time(NULL));
	setlocale(LC_ALL, "");

	/*
	1.	Ввести два целочисленных массива − по 10 элементов в каждом.
	Сформировать новый массив, на четных местах которого будут элементы с нечетными индексами из первого массива,
	а на нечетных – с четными индексами из второго.
	*/
	/*int a[10] = { 0 }, b[10] = { 0 }, c[10] = { 0 }, k = 1;

	printf("Два массива: ");
	for (size_t i = 0; i < 10; i++)
	{
		a[i] = 1 + rand() % 50;
		printf("A[%d]=%d;\n",i, a[i]);

		b[i] = 1 + rand() % 50;
		printf("b[%d]=%d;\n",i, b[i]);
	}
	for (size_t i = 0; i < 10; i=i+2)
	{
		k = k + 2;
		c[i] = a[k];
		printf("++%d\n", c[i]);
	}
	for (size_t i = 1; i < 10; i = i + 2)
	{
		c[i] = a[k++];
		printf("--%d\n", c[i]);
	}*/

	/*
	2.	Ввести целочисленный массив, состоящий из 17-ти элементов (двузначные целые числа).
	Вычислить сумму цифр этого массива
	*/
	/*int x[17] = { 0 };
	for (size_t i = 0; i < 17; i++)
	{
		x[i] = 1 + rand() % 50;
		printf("X[%d]=%d\n", i, x[i]);
	}
	int sum = 0;
	for (size_t i = 0; i < 17; i++)
	{
		sum += x[i];
	}
	printf("Sum:%d\n", sum);*/

	/*
	3.	Ввести два массива X и Y, состоящих из 10-ти элементов целого типа.
	Сформировать массив S, состоящий из одинаковых элементов исходных массивов
	*/
	/*int x[10] = { 0 }, y[10] = { 0 }, S[10] = { 0 };
	for (size_t i = 0; i < 10; i++)
	{
		x[i] = 1 + rand() % 50;
		y[i] = 1 + rand() % 50;
		printf("X[%d]=%d\n", i, x[i]);
		printf("Y[%d]=%d\n", i, y[i]);
	}
	int i = 0;
	for (int i = 0; i < 10; i++)
	{
		for (size_t j = 0; j < 10; j++)
		{
			if (x[i] == y[j])
			{
				S[i] = x[i];
			}
		}
	printf("Получившийся массив: %d\n", S[i]);
	}*/

	/*
	4.	Дан массив вещественных чисел Z(16) .
	Определить разность между суммой элементов c четными индексами и суммой элементов, индексы которых кратны трем
	*/
	/*int z[16] = { 0 }, sum1=0, sum2=0 , x=0;
	for (size_t i = 0; i < 16; i++)
	{
		z[i] = 1 + rand() % 50;
	}
	for (size_t j = 0; j < 16; j=j+2)
	{
		sum1 = sum1 + z[j];
	}
	printf("Sum1 = %d\n", sum1);

	x = x % 3;
	for (size_t n = 0; n < 16; n++)
	{
		sum2 = sum2 + z[x];
	}
	printf("Sum2 = %d\n", sum2);*/

	/*
	5.	Ввести массив, состоящий из 12 элементов действительного типа.
	Расположить элементы в порядке убывания.
	Определить количество  происшедших при этом перестановок.
	*/
	/*int x[12] = { 0 }, jk = 0, it = 0;
	for (size_t i = 0; i < 12; i++)
	{
		x[i] = 1 + rand() % 50;
		printf("%d;;\n", x[i]);
	}
	for (int j = 12 - 1; j > 0; j--)
	{
		for (int i = 0; i < j; i++)
			if (x[i] > x[i + 1])
			{
				jk = x[i];
				x[i] = x[i + 1];
				x[i + 1] = jk;
				it++;
			}
		printf("%d\n", x[j]);
	}
	printf("Кол-во перестановок: %d\n", it);*/
	
	/*
	6.	Ввести с клавиатуры целочисленный массив, состоящий из 11 элементов. 
	Вычислить сумму нечетных по значению отрицательных элементов и заменить элементы кратные трем на эту сумму.
	*/
	/*int x[11] = { 0 };
	for (size_t i = 0; i < 11; i++)
	{
		x[i] = 1 + rand() % 50;
	}
	int sum = 0;
	printf("До: \n");
	for (int i = 0; i < 11; ++i)
	{
		x[i] = rand() % 100;
		printf("%d\n", x[i]);
		sum = sum + x[i];
		if (x[i] % 3 == 0)
		{
			x[i] *= -1;
			x[i] = sum;
		}
	}
	
	printf("После: \n");
	for (int i = 0; i < 11; ++i)
	{
		printf("%d;\n", x[i]);
	}*/
	
	/*
	7.Дан массив вещественных чисел. Определить элемент массива (значение и индекс), 
	который наиболее удален от заданного вещественного числа S.
	*/
	/*int x[10] = { 0 }, k =0, R, lmin=0;
	for (size_t i = 0; i < 10; i++)
	{
		x[i] = 1 + rand() % 50;
		printf("%d;\n", x[i]);
	}
	printf("Enter R: ");
	scanf_s("%d", &R);
	for (int i(0); i < 10; i++)
		if (sqrt(R - x[i]) > lmin)
		{
			k = x[i];
			lmin = sqrt(R - x[i]);
		}
	printf("[%d]\n",lmin);*/
	
	/*
	8.	Ввести целочисленный массив, состоящий из 10 элементов.
	Определить сумму и количество элементов, расположенных до первого отрицательного числа
	*/
	/*int a[10] = { 0 };
	int sum = 0, k=0;

	for (size_t i = 0; i < 10; i++)
	{
		a[i] = -3 + rand() % 10;
		sum = sum + a[i];
		if (a[i] < 0) break;
		{
			sum = sum + a[i];
			k++;
			printf("a[%d] = %d\n", i, a[i]);
		}
	}
	printf("kol-vo = %d\n", k);*/
	
	/*
	9.	Определить количество локальных минимумов в заданном числовом массиве. 
	*/
	/*int x[20] = { 0 }, localmin=0;
	for (size_t j = 0; j < 20; j++)
	{
		x[j] = 1 + rand() % 50;
		printf("X[%d] = %d;\n",j, x[j]);
		if (x[1] < x[2])
		{
			localmin++;
		}
		if (x[j] < x[j - 1])
		{
			localmin++;
		}
	}
	for (int n = 2; n < 20 - 1; n++)
	{
		if (x[n] < x[n - 1] && x[n] < x[n + 1])
		{
			localmin++;
		}
	}
		if (localmin > 0)
			printf("Количество локальных минимумов: %d\n", localmin);
		else
			printf("Локальных минимумов нет!\n");*/
	

	system("pause");
}